#include <stdint.h>
#include "places.h"
#include "imageconverter.h"

/**
 * Array of planet surface textures and palette IDs. The surface texture file
 * number is found at offset (place_id * 2) in this array, and the lowercase
 * alpha character that identifies the palette file is in the byte that
 * immediately follows.
 */
const uint8_t Places::s_planetTextureMapping[622] =
{
  0x00, 0x00, 0x00, 0x00, 0x07, 0x61, 0x0E, 0x61, 0x26, 0x61, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x61, 0x22, 0x61, 0x2F, 0x61, 0x07, 0x62,
  0x10, 0x64, 0x0F, 0x61, 0x10, 0x61, 0x0A, 0x61, 0x12, 0x61, 0x1A, 0x61,
  0x03, 0x61, 0x00, 0x00, 0x14, 0x61, 0x08, 0x61, 0x0D, 0x61, 0x24, 0x61,
  0x0D, 0x62, 0x2B, 0x61, 0x1D, 0x61, 0x00, 0x00, 0x2A, 0x61, 0x05, 0x61,
  0x20, 0x61, 0x2E, 0x61, 0x0D, 0x6F, 0x07, 0x63, 0x1C, 0x61, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0C, 0x61, 0x29, 0x61, 0x28, 0x61, 0x21, 0x61,
  0x0A, 0x62, 0x2B, 0x62, 0x2C, 0x61, 0x30, 0x61, 0x0A, 0x63, 0x2A, 0x62,
  0x0B, 0x61, 0x2F, 0x62, 0x1E, 0x61, 0x0F, 0x65, 0x2C, 0x62, 0x31, 0x61,
  0x0D, 0x64, 0x14, 0x62, 0x0D, 0x63, 0x2E, 0x62, 0x0A, 0x64, 0x2F, 0x63,
  0x1D, 0x66, 0x08, 0x62, 0x03, 0x62, 0x32, 0x61, 0x21, 0x62, 0x13, 0x6B,
  0x2B, 0x63, 0x22, 0x62, 0x21, 0x63, 0x00, 0x00, 0x14, 0x63, 0x20, 0x6A,
  0x0A, 0x65, 0x2A, 0x63, 0x2D, 0x61, 0x1F, 0x61, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x12, 0x62, 0x0E, 0x62, 0x1C, 0x62, 0x19, 0x61, 0x13, 0x61,
  0x14, 0x64, 0x0C, 0x64, 0x0D, 0x65, 0x0E, 0x63, 0x04, 0x64, 0x24, 0x62,
  0x11, 0x64, 0x22, 0x68, 0x0D, 0x66, 0x11, 0x65, 0x03, 0x63, 0x28, 0x62,
  0x20, 0x64, 0x1E, 0x62, 0x00, 0x00, 0x2B, 0x64, 0x0D, 0x67, 0x06, 0x61,
  0x0B, 0x62, 0x09, 0x61, 0x10, 0x64, 0x04, 0x62, 0x26, 0x62, 0x24, 0x64,
  0x18, 0x61, 0x19, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x14, 0x65, 0x06, 0x62, 0x12, 0x67, 0x20, 0x65, 0x09, 0x62, 0x0F, 0x63,
  0x23, 0x61, 0x0B, 0x63, 0x2F, 0x64, 0x20, 0x63, 0x32, 0x62, 0x0D, 0x70,
  0x18, 0x62, 0x05, 0x62, 0x13, 0x62, 0x0A, 0x66, 0x2A, 0x65, 0x28, 0x64,
  0x1C, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x67, 0x2F, 0x69,
  0x22, 0x63, 0x04, 0x63, 0x14, 0x66, 0x10, 0x66, 0x0E, 0x64, 0x0D, 0x68,
  0x30, 0x62, 0x20, 0x62, 0x10, 0x62, 0x14, 0x6D, 0x07, 0x65, 0x2B, 0x65,
  0x22, 0x68, 0x04, 0x65, 0x1B, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x2A, 0x64, 0x21, 0x64, 0x0B, 0x65, 0x25, 0x61,
  0x1E, 0x63, 0x13, 0x63, 0x05, 0x65, 0x02, 0x61, 0x2D, 0x64, 0x13, 0x6C,
  0x27, 0x61, 0x22, 0x64, 0x2A, 0x63, 0x2B, 0x66, 0x21, 0x65, 0x1D, 0x62,
  0x0D, 0x69, 0x13, 0x64, 0x31, 0x67, 0x06, 0x63, 0x25, 0x62, 0x1E, 0x64,
  0x14, 0x67, 0x0C, 0x64, 0x30, 0x63, 0x09, 0x63, 0x26, 0x63, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x2A, 0x64, 0x2B, 0x63, 0x23, 0x62, 0x12, 0x66,
  0x01, 0x63, 0x32, 0x63, 0x0D, 0x6A, 0x1F, 0x62, 0x24, 0x63, 0x1C, 0x65,
  0x1D, 0x63, 0x13, 0x65, 0x2F, 0x65, 0x2A, 0x65, 0x0F, 0x64, 0x19, 0x63,
  0x11, 0x63, 0x20, 0x67, 0x2E, 0x64, 0x1F, 0x63, 0x1D, 0x65, 0x2E, 0x65,
  0x0D, 0x6B, 0x0D, 0x6C, 0x21, 0x66, 0x31, 0x62, 0x20, 0x68, 0x2F, 0x66,
  0x25, 0x63, 0x1D, 0x65, 0x1B, 0x62, 0x13, 0x66, 0x2A, 0x66, 0x2B, 0x67,
  0x28, 0x63, 0x32, 0x64, 0x12, 0x63, 0x32, 0x66, 0x23, 0x65, 0x0E, 0x65,
  0x2B, 0x68, 0x14, 0x68, 0x2B, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x2A, 0x65, 0x31, 0x63, 0x21, 0x67, 0x2F, 0x69,
  0x1F, 0x65, 0x06, 0x64, 0x2D, 0x62, 0x32, 0x65, 0x22, 0x65, 0x1C, 0x64,
  0x14, 0x69, 0x11, 0x62, 0x26, 0x64, 0x31, 0x64, 0x13, 0x67, 0x0C, 0x63,
  0x20, 0x69, 0x2F, 0x67, 0x2E, 0x66, 0x02, 0x62, 0x22, 0x66, 0x23, 0x63,
  0x2F, 0x6A, 0x1B, 0x63, 0x2B, 0x6A, 0x2E, 0x68, 0x2F, 0x68, 0x31, 0x65,
  0x27, 0x62, 0x0D, 0x6D, 0x13, 0x68, 0x14, 0x6A, 0x0C, 0x65, 0x1A, 0x62,
  0x13, 0x65, 0x2A, 0x67, 0x2B, 0x6A, 0x28, 0x64, 0x18, 0x63, 0x1F, 0x66,
  0x2E, 0x64, 0x12, 0x64, 0x04, 0x64, 0x2E, 0x68, 0x2D, 0x63, 0x23, 0x64,
  0x12, 0x65, 0x2B, 0x6B, 0x31, 0x66, 0x11, 0x61, 0x10, 0x63, 0x00, 0x00,
  0x2E, 0x69, 0x00, 0x00, 0x00, 0x61, 0x1D, 0x66, 0x2E, 0x65
};

Places::Places(DatLibrary& lib, Palette& pal, PlaceClasses& pclasses) :
  DatTable<PlaceTableEntry> (lib),
  m_pal(&pal),
  m_placeClasses(&pclasses)
{

}

Places::~Places()
{

}

/**
 * Clears locally cached data.
 */
void Places::clear()
{
  m_placeList.clear();
}

/**
 * Gets the name of the place with the specified ID. If no place with the
 * given ID is found, an empty string is returned.
 */
QString Places::getName(int id)
{
  if (m_placeList.isEmpty())
  {
    populateList();
  }

  if (m_placeList.contains(id))
  {
    return  m_placeList[id].name;
  }

  return QString();
}

bool Places::populateList()
{
  bool status = false;

  if (openFile(DatFileType_CONVERSE, "PLACE.TAB"))
  {
    status = true;
    int index = 0;
    PlaceTableEntry* currentEntry = getEntry(index);

    while (currentEntry != nullptr)
    {
      // the object is only valid if the name offset into GAMETEXT.TXT is not 0xFFFF
      if (currentEntry->nameOffset != 0xFFFF)
      {
        Place p;
        p.id = index;
        p.name = getGameText(currentEntry->nameOffset);
        p.isPlanet = currentEntry->isPlanet;
        p.classId = currentEntry->pclass;

        if (!p.name.isEmpty())
        {
          if (p.isPlanet)
          {
            p.race = static_cast<AlienRace>(currentEntry->race);
            p.representativeId = currentEntry->planetRepId;
            p.parentStarId = currentEntry->parentStarId;
          }

          m_placeList.insert(index, p);
        }
      }
      index++;
      currentEntry = getEntry(index);
    }
  }

  return status;
}

/**
 * Gets a map of IDs to struct, where each one contains data about one of the
 * places in the game.
 */
QMap<int,Place> Places::getPlaceList()
{
  if (m_placeList.isEmpty())
  {
    populateList();
  }
  return m_placeList;
}

/**
 * Gets data about the place specified by the provided ID, and returns it in
 * the provided struct reference.
 * @return True when a place with the ID is found, false otherwise.
 */
bool Places::getPlace(int id, Place& place)
{
  bool status = false;

  if (m_placeList.isEmpty())
  {
    populateList();
  }

  if (m_placeList.contains(id))
  {
    status = true;
    place = m_placeList[id];
  }

  return status;
}

/**
 * Creates an image from the texture file and palette associated with the provided place ID.
 * If successful, the parameter 'status' is set to true; otherwise, it is set to false.
 */
QImage Places::getPlaceSurfaceImage(int id, bool& status, QString& palFilename)
{
  const uint8_t baseNum = s_planetTextureMapping[id * 2];
  const unsigned char palLetter = s_planetTextureMapping[id * 2 + 1];

  const QString plnFilename = QString("WORLD%1a.pln").arg(baseNum, 2, 10, QChar('0'));
  palFilename = QString("WORLD%1%2.pal").arg(baseNum, 2, 10, QChar('0')).arg(QString(palLetter));

  QByteArray plnFile;
  QVector<QRgb> pal;

  status = (m_pal->paletteByName(DatFileType_TEST, palFilename, pal) &&
            m_lib->getFileByName(DatFileType_TEST, plnFilename, plnFile));

  QImage surfaceImage;
  status = status && ImageConverter::plnToPixmap(plnFile, pal, surfaceImage);

  return surfaceImage;
}
